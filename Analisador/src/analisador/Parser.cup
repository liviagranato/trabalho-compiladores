package analisador;

import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import analisador.Yylex;

parser code
{:
    private Symbol s;  //s recebe o Symbol da classe Symbol
    
    public static void main(String args[]) throws Exception{
    //    new Parser (new Yylex(System.in)).parse();
    }
    
    public void syntax_error(Symbol s){
        this.s = s; //recebe simbolo que deu erro        
    }

    //metodo para pegar o "s"
    public Symbol getS(){
        return this.s;
}
:};

terminal OP_ARITMETICO, OP_SOMA, OP_SUBTRACAO, OP_LOGICO, OP_NEGACAO, OP_RELACIONAL, OP_IGUAL, OP_DIFERENTE, OP_BOOLEANO, ABRE_PARENTESES, FECHA_PARENTESES, ABRE_COLCHETES, FECHA_COLCHETES, PONTO_VIRGULA, VIRGULA, ASPAS_DUPLAS, ASPAS_SIMPLES,  COMENTARIO, PRINCIPAL, FIM, FUNCAO, FUNCAO_FIM, SE, SE_FIM, ESE, ESE_FIM, SENAO, SENAO_FIM, REPETICAO, REPETICAO_FIM, ENQUANTO, ENQUANTO_FIM, ESCREVA, LEIA, RETORNA, IDENTIFICADOR, INTEIRO, REAL, ERROR;


non terminal programa, funcoes, operacoes, comandos, condicional, condicional_simples, condicional_composta, condicao, imprime, escaneia, chamada, atribuicao, comandos_logicos,
comandos_relacionais, comandos_aritmeticos, numeros, vetor, vetor_inteiro, vetor_real,
vetor_string, string, variavel, parametro, loop, loop_repeticao, loop_enquanto, iterador,
iterador_digito, iterador_variavel;

start with programa;

//Estrutura programa
programa ::= PRINCIPAL operacoes FIM 
        |  funcoes PRINCIPAL operacoes FIM
        ;	

funcoes ::= FUNCAO chamada operacoes RETORNA variavel FUNCAO_FIM funcoes 
       | FUNCAO chamada operacoes RETORNA variavel FUNCAO_FIM
       ;

operacoes ::= comandos 
         | comandos operacoes 
         | condicional 
         | loop 
         | loop operacoes
         ;

comandos ::= comandos_aritmeticos 
        | imprime 
        | escaneia 
        | atribuicao 
        | chamada
        ;

//Estruturas condicionais
condicional ::= condicional_simples 
           | condicional_simples condicional
           ; 

condicional_simples ::= SE condicao operacoes SE_FIM 
                   | SE condicao operacoes SE_FIM condicional_composta
                   ;

condicional_composta ::= ESE condicao operacoes ESE_FIM 
                    | ESE condicao operacoes ESE_FIM condicional_composta
                    | SENAO operacoes SENAO_FIM
                    ;

condicao ::= comandos_relacionais 
        | comandos_logicos
        ;


//Comandos executaveis
imprime ::= ESCREVA variavel 
       | ESCREVA string 
       | ESCREVA numeros
       ;

escaneia ::= LEIA INTEIRO 
        | LEIA string 
        | LEIA REAL
        ;

chamada ::= IDENTIFICADOR ABRE_PARENTESES parametro FECHA_PARENTESES 
       | IDENTIFICADOR ABRE_PARENTESES FECHA_PARENTESES
       ;

atribuicao ::= ABRE_PARENTESES numeros FECHA_PARENTESES 
          | ABRE_PARENTESES OP_BOOLEANO FECHA_PARENTESES 
          | ABRE_PARENTESES string FECHA_PARENTESES 
          | ABRE_PARENTESES vetor FECHA_PARENTESES
          ;

comandos_logicos ::= comandos_relacionais OP_LOGICO comandos_relacionais 
                | comandos_relacionais OP_NEGACAO OP_LOGICO comandos_relacionais 
                | OP_NEGACAO comandos_relacionais
                ;

comandos_relacionais ::= variavel OP_RELACIONAL variavel 
                    | variavel OP_RELACIONAL numeros 
                    | variavel OP_IGUAL variavel 
                    | variavel OP_IGUAL numeros 
                    | variavel OP_IGUAL OP_BOOLEANO 
                    | variavel OP_DIFERENTE variavel 
                    | variavel OP_DIFERENTE numeros 
                    | variavel OP_RELACIONAL string
                    ;

comandos_aritmeticos ::= variavel OP_ARITMETICO variavel 
                    | variavel OP_ARITMETICO numeros 
                    | variavel OP_SOMA variavel 
                    | variavel OP_SOMA numeros 
                    | variavel OP_SUBTRACAO variavel 
                    | variavel OP_SUBTRACAO numeros 
                    | string OP_SOMA string 
                    | string OP_SOMA variavel 
                    | variavel OP_SOMA string
                    ;


//Estrutura de dados
numeros ::= INTEIRO 
       | REAL
       ;

vetor ::= vetor_inteiro 
     | vetor_real 
     | vetor_string
     ;

vetor_inteiro ::= INTEIRO VIRGULA INTEIRO 
             | INTEIRO VIRGULA vetor_inteiro
             ;

vetor_real ::= REAL VIRGULA REAL 
          | REAL VIRGULA vetor_real
          ;

vetor_string ::= string VIRGULA string 
            | string VIRGULA vetor_string
            ;

string ::= ASPAS_DUPLAS IDENTIFICADOR ASPAS_DUPLAS 
      | ASPAS_SIMPLES IDENTIFICADOR ASPAS_SIMPLES
      ;

variavel ::= IDENTIFICADOR atribuicao;

parametro ::= IDENTIFICADOR 
         | IDENTIFICADOR VIRGULA parametro
         ; 

//Estruturas de repeticao
loop ::= loop_repeticao 
    | loop_enquanto
    ;
 
loop_repeticao ::= REPETICAO ABRE_COLCHETES iterador FECHA_COLCHETES operacoes REPETICAO_FIM
              ;
 
loop_enquanto ::= ENQUANTO ABRE_COLCHETES condicao FECHA_COLCHETES operacoes ENQUANTO_FIM;

iterador ::= iterador_digito 
        | iterador_variavel
        ;

//trocar numero por inteiro
iterador_digito ::= variavel ABRE_PARENTESES INTEIRO FECHA_PARENTESES PONTO_VIRGULA variavel OP_RELACIONAL INTEIRO PONTO_VIRGULA variavel OP_SOMA OP_SOMA 
               | variavel ABRE_PARENTESES INTEIRO FECHA_PARENTESES PONTO_VIRGULA variavel OP_RELACIONAL INTEIRO PONTO_VIRGULA variavel OP_SUBTRACAO OP_SUBTRACAO
               ;

iterador_variavel ::= variavel ABRE_PARENTESES INTEIRO FECHA_PARENTESES PONTO_VIRGULA variavel OP_RELACIONAL variavel PONTO_VIRGULA variavel OP_SOMA OP_SOMA 
                 | variavel ABRE_PARENTESES INTEIRO FECHA_PARENTESES PONTO_VIRGULA variavel OP_RELACIONAL variavel PONTO_VIRGULA variavel OP_SUBTRACAO OP_SUBTRACAO
                 ;
