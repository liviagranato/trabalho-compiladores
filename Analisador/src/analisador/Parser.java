
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 28 20:51:26 BRT 2019
//----------------------------------------------------

package analisador;

import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import analisador.Yylex;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 28 20:51:26 BRT 2019
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\005\000\002\002" +
    "\006\000\002\003\007\000\002\003\006\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\004\004\000" +
    "\002\004\003\000\002\004\004\000\002\004\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\006\010\000\002\006\011\000" +
    "\002\007\010\000\002\007\011\000\002\007\005\000\002" +
    "\010\003\000\002\010\003\000\002\011\004\000\002\011" +
    "\004\000\002\012\004\000\002\013\006\000\002\013\005" +
    "\000\002\014\006\000\002\014\006\000\002\014\006\000" +
    "\002\014\006\000\002\015\005\000\002\015\006\000\002" +
    "\015\004\000\002\015\007\000\002\016\003\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\021\005\000" +
    "\002\022\005\000\002\023\004\000\002\023\004\000\002" +
    "\023\004\000\002\023\004\000\002\024\003\000\002\024" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\026\005\000\002\026\005\000\002\027\005\000" +
    "\002\027\005\000\002\030\005\000\002\030\005\000\002" +
    "\031\003\000\002\031\005\000\002\032\003\000\002\032" +
    "\003\000\002\033\010\000\002\034\010\000\002\035\003" +
    "\000\002\035\003\000\002\036\014\000\002\036\014\000" +
    "\002\037\014\000\002\037\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\006\027\006\031\007\001\002\000\004\027" +
    "\254\001\002\000\004\002\253\001\002\000\032\020\030" +
    "\026\044\033\042\041\036\043\050\045\023\046\052\047" +
    "\034\050\041\051\027\052\026\053\046\001\002\000\004" +
    "\050\011\001\002\000\032\020\030\026\044\033\042\041" +
    "\036\043\050\045\023\046\052\047\034\050\041\051\027" +
    "\052\026\053\046\001\002\000\004\020\012\001\002\000" +
    "\006\021\015\050\013\001\002\000\006\021\uffb4\025\017" +
    "\001\002\000\004\021\016\001\002\000\050\020\uffe2\026" +
    "\uffe2\030\uffe2\032\uffe2\033\uffe2\034\uffe2\036\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047" +
    "\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\001\002\000\050" +
    "\020\uffe3\026\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3\036" +
    "\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3" +
    "\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\001" +
    "\002\000\004\050\013\001\002\000\004\021\uffb3\001\002" +
    "\000\040\026\ufffc\030\ufffc\032\ufffc\033\ufffc\034\ufffc\036" +
    "\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc" +
    "\046\ufffc\047\ufffc\050\ufffc\001\002\000\040\026\ufff5\030" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\036\ufff5\040\ufff5\041\ufff5" +
    "\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\001\002\000\014\020\030\050\247\051\027\052\026" +
    "\053\046\001\002\000\040\026\uffb2\030\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\036\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\001\002\000" +
    "\040\026\ufff3\030\ufff3\032\ufff3\033\ufff3\034\ufff3\036\ufff3" +
    "\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046" +
    "\ufff3\047\ufff3\050\ufff3\001\002\000\072\004\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\021\uffbf\023\uffbf\026\uffbf\030\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\036\uffbf\040\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf" +
    "\001\002\000\064\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\014\uffc6\015\uffc6\016\uffc6\021\uffc6\026\uffc6" +
    "\030\uffc6\032\uffc6\033\uffc6\034\uffc6\036\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\001\002\000\014\020\030\050\062\051\027\052" +
    "\026\053\046\001\002\000\040\026\ufff2\030\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\036\ufff2\040\ufff2\041\ufff2\042\ufff2\043" +
    "\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\001\002" +
    "\000\040\026\ufffa\030\ufffa\032\ufffa\033\ufffa\034\ufffa\036" +
    "\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa" +
    "\046\ufffa\047\ufffa\050\ufffa\001\002\000\040\026\ufff0\030" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\036\ufff0\040\ufff0\041\ufff0" +
    "\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050" +
    "\ufff0\001\002\000\014\017\243\050\242\051\241\052\026" +
    "\053\046\001\002\000\040\026\uffef\030\uffef\032\uffef\033" +
    "\uffef\034\uffef\036\uffef\040\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef\001\002\000" +
    "\004\022\211\001\002\000\040\026\ufff1\030\ufff1\032\ufff1" +
    "\033\ufff1\034\ufff1\036\ufff1\040\ufff1\041\ufff1\042\ufff1\043" +
    "\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\001\002" +
    "\000\024\026\044\032\207\033\042\041\036\043\050\045" +
    "\023\046\052\047\034\050\106\001\002\000\056\004\112" +
    "\005\111\006\uffc7\007\uffc7\010\uffc7\011\uffc7\020\110\026" +
    "\uffc7\030\uffc7\032\uffc7\033\uffc7\034\uffc7\036\uffc7\040\uffc7" +
    "\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047" +
    "\uffc7\050\uffc7\001\002\000\004\022\167\001\002\000\040" +
    "\026\uffb1\030\uffb1\032\uffb1\033\uffb1\034\uffb1\036\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\001\002\000\040\026\uffee\030\uffee\032" +
    "\uffee\033\uffee\034\uffee\036\uffee\040\uffee\041\uffee\042\uffee" +
    "\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\001" +
    "\002\000\040\026\ufff8\030\ufff8\032\ufff8\033\ufff8\034\ufff8" +
    "\036\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045" +
    "\ufff8\046\ufff8\047\ufff8\050\ufff8\001\002\000\072\004\uffbe" +
    "\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\021\uffbe\023\uffbe\026\uffbe" +
    "\030\uffbe\032\uffbe\033\uffbe\034\uffbe\036\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\001\002\000\040\026\ufff4\030\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\036\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4" +
    "\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\001\002\000" +
    "\004\022\072\001\002\000\064\004\uffc8\005\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\011\uffc8\014\uffc8\015\uffc8\016\uffc8\021" +
    "\uffc8\026\uffc8\030\uffc8\032\uffc8\033\uffc8\034\uffc8\036\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\001\002\000\004\050\071\001\002" +
    "\000\054\004\056\005\055\006\054\007\061\010\057\011" +
    "\060\026\ufff6\030\ufff6\032\ufff6\033\ufff6\034\ufff6\036\ufff6" +
    "\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046" +
    "\ufff6\047\ufff6\050\ufff6\001\002\000\014\020\030\050\062" +
    "\051\027\052\026\053\046\001\002\000\014\020\030\050" +
    "\062\051\027\052\026\053\046\001\002\000\014\020\030" +
    "\050\062\051\027\052\026\053\046\001\002\000\014\020" +
    "\030\050\062\051\027\052\026\053\046\001\002\000\014" +
    "\020\030\050\062\051\027\052\026\053\046\001\002\000" +
    "\014\020\030\050\062\051\027\052\026\053\046\001\002" +
    "\000\064\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\021\uffc7\026\uffc7\030\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\036\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\001\002\000\064\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010" +
    "\057\011\060\014\uffcc\015\uffcc\016\uffcc\021\uffcc\026\uffcc" +
    "\030\uffcc\032\uffcc\033\uffcc\034\uffcc\036\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\001\002\000\064\004\uffca\005\uffca\006\uffca\007" +
    "\uffca\010\uffca\011\uffca\014\uffca\015\uffca\016\uffca\021\uffca" +
    "\026\uffca\030\uffca\032\uffca\033\uffca\034\uffca\036\uffca\040" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\001\002\000\064\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\021\uffcb\026\uffcb\030\uffcb\032\uffcb\033\uffcb\034\uffcb\036" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\001\002\000\064\004\uffcf\005" +
    "\uffcf\006\054\007\061\010\057\011\060\014\uffcf\015\uffcf" +
    "\016\uffcf\021\uffcf\026\uffcf\030\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\036\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\050\uffcf\001\002\000\064\004" +
    "\uffce\005\uffce\006\054\007\061\010\057\011\060\014\uffce" +
    "\015\uffce\016\uffce\021\uffce\026\uffce\030\uffce\032\uffce\033" +
    "\uffce\034\uffce\036\uffce\040\uffce\041\uffce\042\uffce\043\uffce" +
    "\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\001\002\000" +
    "\064\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\057\011\060" +
    "\014\uffcd\015\uffcd\016\uffcd\021\uffcd\026\uffcd\030\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\036\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\001" +
    "\002\000\040\026\uffe4\030\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\036\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045" +
    "\uffe4\046\uffe4\047\uffe4\050\uffe4\001\002\000\016\013\077" +
    "\020\030\050\062\051\027\052\026\053\046\001\002\000" +
    "\010\012\uffd9\013\uffd9\023\uffd9\001\002\000\010\012\160" +
    "\013\161\023\uffe8\001\002\000\004\023\uffe7\001\002\000" +
    "\024\004\056\005\055\006\054\007\061\010\057\011\060" +
    "\014\146\015\144\016\145\001\002\000\014\020\030\050" +
    "\062\051\027\052\026\053\046\001\002\000\004\023\101" +
    "\001\002\000\032\020\030\026\044\033\042\041\036\043" +
    "\050\045\023\046\052\047\034\050\041\051\027\052\026" +
    "\053\046\001\002\000\024\026\044\033\042\041\036\043" +
    "\050\044\105\045\023\046\052\047\034\050\106\001\002" +
    "\000\040\026\ufffb\030\ufffb\032\ufffb\033\ufffb\034\ufffb\036" +
    "\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb" +
    "\046\ufffb\047\ufffb\050\ufffb\001\002\000\040\026\ufff9\030" +
    "\ufff9\032\ufff9\033\ufff9\034\ufff9\036\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050" +
    "\ufff9\001\002\000\040\026\uffaf\030\uffaf\032\uffaf\033\uffaf" +
    "\034\uffaf\036\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\001\002\000\010" +
    "\004\112\005\111\020\110\001\002\000\040\026\ufff7\030" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\036\ufff7\040\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050" +
    "\ufff7\001\002\000\016\017\121\021\015\050\013\051\122" +
    "\052\117\053\124\001\002\000\004\005\114\001\002\000" +
    "\004\004\113\001\002\000\042\023\uffc5\026\uffc5\030\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\036\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\001\002\000\042\023\uffc4\026\uffc4\030\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\036\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\001\002\000" +
    "\004\021\142\001\002\000\004\021\141\001\002\000\006" +
    "\021\uffbf\025\136\001\002\000\004\021\uffbb\001\002\000" +
    "\004\021\135\001\002\000\006\021\131\025\132\001\002" +
    "\000\004\021\uffbd\001\002\000\006\021\uffbe\025\126\001" +
    "\002\000\004\021\uffbc\001\002\000\004\053\127\001\002" +
    "\000\006\021\uffb8\025\126\001\002\000\004\021\uffb7\001" +
    "\002\000\040\026\uffdf\030\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\036\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045" +
    "\uffdf\046\uffdf\047\uffdf\050\uffdf\001\002\000\004\051\133" +
    "\001\002\000\006\021\uffb6\025\132\001\002\000\004\021" +
    "\uffb5\001\002\000\040\026\uffe0\030\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\036\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\001\002\000\004" +
    "\052\140\001\002\000\004\021\uffb9\001\002\000\006\021" +
    "\uffba\025\136\001\002\000\040\026\uffde\030\uffde\032\uffde" +
    "\033\uffde\034\uffde\036\uffde\040\uffde\041\uffde\042\uffde\043" +
    "\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\001\002" +
    "\000\040\026\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\036" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1" +
    "\046\uffe1\047\uffe1\050\uffe1\001\002\000\004\023\uffdb\001" +
    "\002\000\014\017\157\050\156\051\155\052\026\053\046" +
    "\001\002\000\012\050\153\051\152\052\026\053\046\001" +
    "\002\000\010\050\150\052\026\053\046\001\002\000\010" +
    "\012\uffd5\013\uffd5\023\uffd5\001\002\000\010\012\uffd6\013" +
    "\uffd6\023\uffd6\001\002\000\010\012\uffd3\013\uffd3\023\uffd3" +
    "\001\002\000\010\012\uffd0\013\uffd0\023\uffd0\001\002\000" +
    "\010\012\uffd4\013\uffd4\023\uffd4\001\002\000\010\012\uffd7" +
    "\013\uffd7\023\uffd7\001\002\000\010\012\uffd1\013\uffd1\023" +
    "\uffd1\001\002\000\010\012\uffd8\013\uffd8\023\uffd8\001\002" +
    "\000\010\012\uffd2\013\uffd2\023\uffd2\001\002\000\014\020" +
    "\030\050\062\051\027\052\026\053\046\001\002\000\004" +
    "\012\162\001\002\000\014\020\030\050\062\051\027\052" +
    "\026\053\046\001\002\000\004\023\uffdc\001\002\000\006" +
    "\012\165\023\uffdd\001\002\000\016\013\077\020\030\050" +
    "\062\051\027\052\026\053\046\001\002\000\004\023\uffda" +
    "\001\002\000\016\013\077\020\030\050\062\051\027\052" +
    "\026\053\046\001\002\000\004\023\171\001\002\000\032" +
    "\020\030\026\044\033\042\041\036\043\050\045\023\046" +
    "\052\047\034\050\041\051\027\052\026\053\046\001\002" +
    "\000\024\026\044\033\042\034\173\041\036\043\050\045" +
    "\023\046\052\047\034\050\106\001\002\000\044\026\uffed" +
    "\030\uffed\032\uffed\033\uffed\034\uffed\035\174\036\uffed\037" +
    "\175\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed" +
    "\046\uffed\047\uffed\050\uffed\001\002\000\004\022\201\001" +
    "\002\000\032\020\030\026\044\033\042\041\036\043\050" +
    "\045\023\046\052\047\034\050\041\051\027\052\026\053" +
    "\046\001\002\000\040\026\uffec\030\uffec\032\uffec\033\uffec" +
    "\034\uffec\036\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044" +
    "\uffec\045\uffec\046\uffec\047\uffec\050\uffec\001\002\000\024" +
    "\026\044\033\042\040\200\041\036\043\050\045\023\046" +
    "\052\047\034\050\106\001\002\000\040\026\uffe9\030\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\036\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9" +
    "\001\002\000\016\013\077\020\030\050\062\051\027\052" +
    "\026\053\046\001\002\000\004\023\203\001\002\000\032" +
    "\020\030\026\044\033\042\041\036\043\050\045\023\046" +
    "\052\047\034\050\041\051\027\052\026\053\046\001\002" +
    "\000\024\026\044\033\042\036\205\041\036\043\050\045" +
    "\023\046\052\047\034\050\106\001\002\000\044\026\uffeb" +
    "\030\uffeb\032\uffeb\033\uffeb\034\uffeb\035\174\036\uffeb\037" +
    "\175\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\001\002\000\040\026\uffea\030" +
    "\uffea\032\uffea\033\uffea\034\uffea\036\uffea\040\uffea\041\uffea" +
    "\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050" +
    "\uffea\001\002\000\006\027\ufffd\031\007\001\002\000\004" +
    "\027\ufffe\001\002\000\004\050\213\001\002\000\004\023" +
    "\235\001\002\000\004\020\216\001\002\000\004\023\uffae" +
    "\001\002\000\004\023\uffad\001\002\000\004\052\217\001" +
    "\002\000\004\021\220\001\002\000\004\024\221\001\002" +
    "\000\004\050\222\001\002\000\004\014\223\001\002\000" +
    "\006\050\224\052\225\001\002\000\004\024\232\001\002" +
    "\000\004\024\226\001\002\000\004\050\227\001\002\000" +
    "\006\004\112\005\111\001\002\000\004\023\uffac\001\002" +
    "\000\004\023\uffab\001\002\000\004\050\227\001\002\000" +
    "\004\023\uffaa\001\002\000\004\023\uffa9\001\002\000\032" +
    "\020\030\026\044\033\042\041\036\043\050\045\023\046" +
    "\052\047\034\050\041\051\027\052\026\053\046\001\002" +
    "\000\024\026\044\033\042\041\036\042\237\043\050\045" +
    "\023\046\052\047\034\050\106\001\002\000\040\026\uffb0" +
    "\030\uffb0\032\uffb0\033\uffb0\034\uffb0\036\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0" +
    "\050\uffb0\001\002\000\040\026\uffc1\030\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\036\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\001\002\000" +
    "\040\026\uffc2\030\uffc2\032\uffc2\033\uffc2\034\uffc2\036\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046" +
    "\uffc2\047\uffc2\050\uffc2\001\002\000\040\026\uffc3\030\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\036\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3" +
    "\001\002\000\040\026\uffc0\030\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\036\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0" +
    "\045\uffc0\046\uffc0\047\uffc0\050\uffc0\001\002\000\020\004" +
    "\056\005\055\006\054\007\061\010\057\011\060\021\245" +
    "\001\002\000\064\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010" +
    "\uffc9\011\uffc9\014\uffc9\015\uffc9\016\uffc9\021\uffc9\026\uffc9" +
    "\030\uffc9\032\uffc9\033\uffc9\034\uffc9\036\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\050\uffc9\001\002\000\040\026\uffe5\030\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\036\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\001\002\000" +
    "\056\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\020\012\026\uffc7\030\uffc7\032\uffc7\033\uffc7\034\uffc7\036" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\001\002\000\054\004\056\005" +
    "\055\006\054\007\061\010\057\011\060\026\uffe6\030\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\036\uffe6\040\uffe6\041\uffe6\042" +
    "\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6" +
    "\001\002\000\024\026\044\030\252\033\042\041\036\043" +
    "\050\045\023\046\052\047\034\050\106\001\002\000\004" +
    "\002\000\001\002\000\004\002\001\001\002\000\032\020" +
    "\030\026\044\033\042\041\036\043\050\045\023\046\052" +
    "\047\034\050\041\051\027\052\026\053\046\001\002\000" +
    "\024\026\044\030\256\033\042\041\036\043\050\045\023" +
    "\046\052\047\034\050\106\001\002\000\004\002\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\250\005\020\006\031" +
    "\011\021\012\046\013\030\014\024\017\052\021\032\022" +
    "\034\023\036\024\050\032\044\033\023\034\042\001\001" +
    "\000\004\013\007\001\001\000\040\004\037\005\020\006" +
    "\031\011\021\012\046\013\030\014\024\017\052\021\032" +
    "\022\034\023\036\024\050\032\044\033\023\034\042\001" +
    "\001\000\002\001\001\000\004\031\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\245\017\247\024" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\243\024\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\102\006\103\011\021" +
    "\012\046\013\030\014\024\021\032\022\034\023\036\032" +
    "\106\033\023\034\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\067\024\050\001\001\000\006\017\066\024\050" +
    "\001\001\000\006\017\065\024\050\001\001\000\006\017" +
    "\064\024\050\001\001\000\006\017\063\024\050\001\001" +
    "\000\006\017\062\024\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\010\077\015\074\016\073\017\075\020\072" +
    "\024\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\142\017\075" +
    "\020\072\024\050\001\001\000\002\001\001\000\040\004" +
    "\101\005\020\006\031\011\021\012\046\013\030\014\024" +
    "\017\052\021\032\022\034\023\036\024\050\032\044\033" +
    "\023\034\042\001\001\000\032\005\102\006\103\011\021" +
    "\012\046\013\030\014\024\021\032\022\034\023\036\032" +
    "\106\033\023\034\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\024\114\025\115\026\122\027\124\030\117" +
    "\031\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\153\001\001\000\004\024\150\001\001" +
    "\000\004\024\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\163\017\075\020\072\024\050" +
    "\001\001\000\002\001\001\000\012\016\162\017\075\020" +
    "\072\024\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\010\165\015\074\016\073\017\075\020\072\024" +
    "\050\001\001\000\002\001\001\000\016\010\167\015\074" +
    "\016\073\017\075\020\072\024\050\001\001\000\002\001" +
    "\001\000\040\004\171\005\020\006\031\011\021\012\046" +
    "\013\030\014\024\017\052\021\032\022\034\023\036\024" +
    "\050\032\044\033\023\034\042\001\001\000\032\005\102" +
    "\006\103\011\021\012\046\013\030\014\024\021\032\022" +
    "\034\023\036\032\106\033\023\034\042\001\001\000\004" +
    "\007\175\001\001\000\002\001\001\000\040\004\176\005" +
    "\020\006\031\011\021\012\046\013\030\014\024\017\052" +
    "\021\032\022\034\023\036\024\050\032\044\033\023\034" +
    "\042\001\001\000\002\001\001\000\032\005\102\006\103" +
    "\011\021\012\046\013\030\014\024\021\032\022\034\023" +
    "\036\032\106\033\023\034\042\001\001\000\002\001\001" +
    "\000\016\010\201\015\074\016\073\017\075\020\072\024" +
    "\050\001\001\000\002\001\001\000\040\004\203\005\020" +
    "\006\031\011\021\012\046\013\030\014\024\017\052\021" +
    "\032\022\034\023\036\024\050\032\044\033\023\034\042" +
    "\001\001\000\032\005\102\006\103\011\021\012\046\013" +
    "\030\014\024\021\032\022\034\023\036\032\106\033\023" +
    "\034\042\001\001\000\004\007\205\001\001\000\002\001" +
    "\001\000\004\003\207\001\001\000\002\001\001\000\010" +
    "\035\211\036\213\037\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\227\022\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\232\022\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\235\005\020\006\031\011\021\012\046" +
    "\013\030\014\024\017\052\021\032\022\034\023\036\024" +
    "\050\032\044\033\023\034\042\001\001\000\032\005\102" +
    "\006\103\011\021\012\046\013\030\014\024\021\032\022" +
    "\034\023\036\032\106\033\023\034\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\102\006\103\011\021\012\046\013\030\014\024" +
    "\021\032\022\034\023\036\032\106\033\023\034\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\254" +
    "\005\020\006\031\011\021\012\046\013\030\014\024\017" +
    "\052\021\032\022\034\023\036\024\050\032\044\033\023" +
    "\034\042\001\001\000\032\005\102\006\103\011\021\012" +
    "\046\013\030\014\024\021\032\022\034\023\036\032\106" +
    "\033\023\034\042\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;  //s recebe o Symbol da classe Symbol
    
    public static void main(String args[]) throws Exception{
    //    new Parser (new Yylex(System.in)).parse();
    }
    
    public void syntax_error(Symbol s){
        this.s = s; //recebe simbolo que deu erro        
    }

    //metodo para pegar o "s"
    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // iterador_variavel ::= IDENTIFICADOR ABRE_PARENTESES INTEIRO FECHA_PARENTESES PONTO_VIRGULA IDENTIFICADOR OP_RELACIONAL IDENTIFICADOR PONTO_VIRGULA decremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador_variavel",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // iterador_variavel ::= IDENTIFICADOR ABRE_PARENTESES INTEIRO FECHA_PARENTESES PONTO_VIRGULA IDENTIFICADOR OP_RELACIONAL IDENTIFICADOR PONTO_VIRGULA incremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador_variavel",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // iterador_digito ::= IDENTIFICADOR ABRE_PARENTESES INTEIRO FECHA_PARENTESES PONTO_VIRGULA IDENTIFICADOR OP_RELACIONAL INTEIRO PONTO_VIRGULA decremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador_digito",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // iterador_digito ::= IDENTIFICADOR ABRE_PARENTESES INTEIRO FECHA_PARENTESES PONTO_VIRGULA IDENTIFICADOR OP_RELACIONAL INTEIRO PONTO_VIRGULA incremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador_digito",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // iterador ::= iterador_variavel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // iterador ::= iterador_digito 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // loop_enquanto ::= ENQUANTO ABRE_COLCHETES condicao FECHA_COLCHETES operacoes ENQUANTO_FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_enquanto",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // loop_repeticao ::= REPETICAO ABRE_COLCHETES iterador FECHA_COLCHETES operacoes REPETICAO_FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_repeticao",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // loop ::= loop_enquanto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // loop ::= loop_repeticao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parametro ::= IDENTIFICADOR VIRGULA parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parametro ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // vetor_string ::= STRING VIRGULA vetor_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor_string",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // vetor_string ::= STRING VIRGULA STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor_string",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // vetor_real ::= REAL VIRGULA vetor_real 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor_real",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // vetor_real ::= REAL VIRGULA REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor_real",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // vetor_inteiro ::= INTEIRO VIRGULA vetor_inteiro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor_inteiro",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // vetor_inteiro ::= INTEIRO VIRGULA INTEIRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor_inteiro",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // vetor ::= vetor_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // vetor ::= vetor_real 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // vetor ::= vetor_inteiro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // numeros ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeros",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // numeros ::= INTEIRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeros",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // retorno ::= RETORNA OP_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // retorno ::= RETORNA numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // retorno ::= RETORNA STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // retorno ::= RETORNA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // decremento ::= IDENTIFICADOR OP_SUBTRACAO OP_SUBTRACAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decremento",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // incremento ::= IDENTIFICADOR OP_SOMA OP_SOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expressao ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expressao ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expressao ::= numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expressao ::= ABRE_PARENTESES expressao FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expressao ::= expressao OP_MOD expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expressao ::= expressao OP_EXPONENCIACAO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expressao ::= expressao OP_DIVISAO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expressao ::= expressao OP_MULTIPLICACAO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expressao ::= expressao OP_SUBTRACAO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expressao ::= expressao OP_SOMA expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expressao_result ::= expressao OP_DIFERENTE STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_result",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expressao_result ::= expressao OP_IGUAL STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_result",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expressao_result ::= expressao OP_IGUAL OP_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_result",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expressao_result ::= expressao OP_DIFERENTE numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_result",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expressao_result ::= expressao OP_DIFERENTE IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_result",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expressao_result ::= expressao OP_RELACIONAL numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_result",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expressao_result ::= expressao OP_RELACIONAL IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_result",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expressao_result ::= expressao OP_IGUAL numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_result",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expressao_result ::= expressao OP_IGUAL IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_result",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comandos_relacionais ::= expressao_result 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_relacionais",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comandos_logicos ::= comandos_relacionais OP_LOGICO comandos_relacionais OP_LOGICO condicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_logicos",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comandos_logicos ::= OP_NEGACAO comandos_relacionais 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_logicos",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comandos_logicos ::= comandos_relacionais OP_NEGACAO OP_LOGICO comandos_relacionais 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_logicos",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comandos_logicos ::= comandos_relacionais OP_LOGICO comandos_relacionais 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_logicos",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // atribuicao ::= IDENTIFICADOR ABRE_PARENTESES vetor FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // atribuicao ::= IDENTIFICADOR ABRE_PARENTESES STRING FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // atribuicao ::= IDENTIFICADOR ABRE_PARENTESES OP_BOOLEANO FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // atribuicao ::= IDENTIFICADOR ABRE_PARENTESES numeros FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // chamada ::= IDENTIFICADOR ABRE_PARENTESES FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // chamada ::= IDENTIFICADOR ABRE_PARENTESES parametro FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // escaneia ::= LEIA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escaneia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // imprime ::= ESCREVA chamada 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprime",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // imprime ::= ESCREVA expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprime",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condicao ::= comandos_logicos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicao",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condicao ::= comandos_relacionais 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicao",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condicional_composta ::= SENAO operacoes SENAO_FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional_composta",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // condicional_composta ::= ESE ABRE_COLCHETES condicao FECHA_COLCHETES operacoes ESE_FIM condicional_composta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional_composta",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // condicional_composta ::= ESE ABRE_COLCHETES condicao FECHA_COLCHETES operacoes ESE_FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional_composta",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // condicional ::= SE ABRE_COLCHETES condicao FECHA_COLCHETES operacoes SE_FIM condicional_composta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // condicional ::= SE ABRE_COLCHETES condicao FECHA_COLCHETES operacoes SE_FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // comandos ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // comandos ::= decremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comandos ::= incremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comandos ::= retorno 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comandos ::= chamada 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // comandos ::= atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // comandos ::= escaneia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // comandos ::= imprime 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operacoes ::= expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacoes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // operacoes ::= operacoes loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacoes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // operacoes ::= loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacoes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // operacoes ::= operacoes condicional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacoes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // operacoes ::= condicional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacoes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // operacoes ::= operacoes comandos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacoes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // operacoes ::= comandos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacoes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcoes ::= FUNCAO chamada operacoes FUNCAO_FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcoes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funcoes ::= FUNCAO chamada operacoes FUNCAO_FIM funcoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcoes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= funcoes PRINCIPAL operacoes FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= PRINCIPAL operacoes FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

