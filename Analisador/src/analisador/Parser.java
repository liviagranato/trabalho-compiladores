
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 27 17:11:04 BRT 2019
//----------------------------------------------------

package analisador;

import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import analisador.Yylex;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 27 17:11:04 BRT 2019
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\002\005\000\002\002" +
    "\006\000\002\003\011\000\002\003\010\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\006" +
    "\003\000\002\006\004\000\002\007\006\000\002\007\007" +
    "\000\002\010\006\000\002\010\007\000\002\010\005\000" +
    "\002\011\003\000\002\011\003\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\014\006\000\002\014\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\016\005\000\002\016\006\000\002" +
    "\016\004\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\021\003\000\002\021\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\023\005\000\002\023\005\000\002\024\005\000\002" +
    "\024\005\000\002\025\005\000\002\025\005\000\002\026" +
    "\005\000\002\026\005\000\002\027\004\000\002\030\003" +
    "\000\002\030\005\000\002\031\003\000\002\031\003\000" +
    "\002\032\010\000\002\033\010\000\002\034\003\000\002" +
    "\034\003\000\002\035\016\000\002\035\016\000\002\036" +
    "\016\000\002\036\016" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\006\026\006\030\007\001\002\000\004\026" +
    "\246\001\002\000\004\002\245\001\002\000\024\015\031" +
    "\023\041\024\034\032\042\040\035\042\045\044\024\045" +
    "\047\047\040\001\002\000\004\047\011\001\002\000\024" +
    "\015\031\023\041\024\034\032\042\040\035\042\045\044" +
    "\024\045\047\047\040\001\002\000\004\015\012\001\002" +
    "\000\006\016\015\047\013\001\002\000\006\016\uffbb\022" +
    "\017\001\002\000\004\016\016\001\002\000\042\015\uffe2" +
    "\023\uffe2\024\uffe2\027\uffe2\032\uffe2\033\uffe2\035\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\001\002\000\042\015\uffe3\023\uffe3\024" +
    "\uffe3\027\uffe3\032\uffe3\033\uffe3\035\uffe3\037\uffe3\040\uffe3" +
    "\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047" +
    "\uffe3\001\002\000\004\047\013\001\002\000\004\016\uffba" +
    "\001\002\000\004\005\240\001\002\000\022\027\ufff2\032" +
    "\042\033\ufff2\035\ufff2\037\ufff2\041\ufff2\043\ufff2\046\ufff2" +
    "\001\002\000\042\015\031\023\041\024\034\027\ufffc\032" +
    "\042\033\ufffc\035\ufffc\037\ufffc\040\035\041\ufffc\042\045" +
    "\043\ufffc\044\024\045\047\046\ufffc\047\040\001\002\000" +
    "\014\023\041\024\034\047\056\050\103\051\101\001\002" +
    "\000\042\015\ufff6\023\ufff6\024\ufff6\027\ufff6\032\ufff6\033" +
    "\ufff6\035\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6" +
    "\044\ufff6\045\ufff6\046\ufff6\047\ufff6\001\002\000\010\004" +
    "\221\005\223\006\222\001\002\000\042\015\uffb9\023\uffb9" +
    "\024\uffb9\027\uffb9\032\uffb9\033\uffb9\035\uffb9\037\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9" +
    "\047\uffb9\001\002\000\042\015\ufff4\023\ufff4\024\ufff4\027" +
    "\ufff4\032\ufff4\033\ufff4\035\ufff4\037\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\001" +
    "\002\000\014\014\135\023\041\024\034\050\133\051\140" +
    "\001\002\000\042\015\ufff3\023\ufff3\024\ufff3\027\ufff3\032" +
    "\ufff3\033\ufff3\035\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3" +
    "\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\001\002\000" +
    "\020\027\ufffa\033\ufffa\035\ufffa\037\ufffa\041\ufffa\043\ufffa" +
    "\046\ufffa\001\002\000\004\047\217\001\002\000\004\017" +
    "\163\001\002\000\042\015\ufff7\023\ufff7\024\ufff7\027\ufff7" +
    "\032\ufff7\033\ufff7\035\ufff7\037\ufff7\040\ufff7\041\ufff7\042" +
    "\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\001\002" +
    "\000\004\046\157\001\002\000\004\015\130\001\002\000" +
    "\004\047\126\001\002\000\006\010\061\047\056\001\002" +
    "\000\042\015\uffb8\023\uffb8\024\uffb8\027\uffb8\032\uffb8\033" +
    "\uffb8\035\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\001\002\000\042\015" +
    "\031\023\041\024\034\027\ufff9\032\042\033\ufff9\035\ufff9" +
    "\037\ufff9\040\035\041\ufff9\042\045\043\ufff9\044\024\045" +
    "\047\046\ufff9\047\040\001\002\000\004\017\053\001\002" +
    "\000\042\015\ufff5\023\ufff5\024\ufff5\027\ufff5\032\ufff5\033" +
    "\ufff5\035\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5" +
    "\044\ufff5\045\ufff5\046\ufff5\047\ufff5\001\002\000\012\023" +
    "\041\024\034\050\052\051\051\001\002\000\042\015\uffe5" +
    "\023\uffe5\024\uffe5\027\uffe5\032\uffe5\033\uffe5\035\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5" +
    "\046\uffe5\047\uffe5\001\002\000\042\015\uffe4\023\uffe4\024" +
    "\uffe4\027\uffe4\032\uffe4\033\uffe4\035\uffe4\037\uffe4\040\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047" +
    "\uffe4\001\002\000\042\015\uffe6\023\uffe6\024\uffe6\027\uffe6" +
    "\032\uffe6\033\uffe6\035\uffe6\037\uffe6\040\uffe6\041\uffe6\042" +
    "\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\001\002" +
    "\000\006\010\061\047\056\001\002\000\010\011\075\012" +
    "\076\013\074\001\002\000\026\015\uffea\020\uffea\023\uffea" +
    "\024\uffea\032\uffea\040\uffea\042\uffea\044\uffea\045\uffea\047" +
    "\uffea\001\002\000\004\015\031\001\002\000\032\007\066" +
    "\010\067\015\uffeb\020\uffeb\023\uffeb\024\uffeb\032\uffeb\040" +
    "\uffeb\042\uffeb\044\uffeb\045\uffeb\047\uffeb\001\002\000\004" +
    "\020\063\001\002\000\004\047\056\001\002\000\026\015" +
    "\uffdb\020\uffdb\023\uffdb\024\uffdb\032\uffdb\040\uffdb\042\uffdb" +
    "\044\uffdb\045\uffdb\047\uffdb\001\002\000\024\015\031\023" +
    "\041\024\034\032\042\040\035\042\045\044\024\045\047" +
    "\047\040\001\002\000\004\043\065\001\002\000\042\015" +
    "\uffb6\023\uffb6\024\uffb6\027\uffb6\032\uffb6\033\uffb6\035\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\046\uffb6\047\uffb6\001\002\000\004\047\056\001\002" +
    "\000\004\007\070\001\002\000\004\047\056\001\002\000" +
    "\026\015\uffdc\020\uffdc\023\uffdc\024\uffdc\032\uffdc\040\uffdc" +
    "\042\uffdc\044\uffdc\045\uffdc\047\uffdc\001\002\000\026\015" +
    "\uffdd\020\uffdd\023\uffdd\024\uffdd\032\uffdd\040\uffdd\042\uffdd" +
    "\044\uffdd\045\uffdd\047\uffdd\001\002\000\070\004\uffbc\005" +
    "\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc" +
    "\015\uffbc\020\uffbc\021\uffbc\023\uffbc\024\uffbc\027\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\035\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\001" +
    "\002\000\010\047\056\050\103\051\101\001\002\000\014" +
    "\023\041\024\034\047\056\050\103\051\101\001\002\000" +
    "\012\014\102\047\056\050\103\051\101\001\002\000\032" +
    "\007\uffd7\010\uffd7\015\uffd7\020\uffd7\023\uffd7\024\uffd7\032" +
    "\uffd7\040\uffd7\042\uffd7\044\uffd7\045\uffd7\047\uffd7\001\002" +
    "\000\032\007\uffd8\010\uffd8\015\uffd8\020\uffd8\023\uffd8\024" +
    "\uffd8\032\uffd8\040\uffd8\042\uffd8\044\uffd8\045\uffd8\047\uffd8" +
    "\001\002\000\050\007\uffc8\010\uffc8\015\uffc8\020\uffc8\023" +
    "\uffc8\024\uffc8\027\uffc8\032\uffc8\033\uffc8\035\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\001\002\000\032\007\uffd6\010\uffd6\015\uffd6" +
    "\020\uffd6\023\uffd6\024\uffd6\032\uffd6\040\uffd6\042\uffd6\044" +
    "\uffd6\045\uffd6\047\uffd6\001\002\000\050\007\uffc9\010\uffc9" +
    "\015\uffc9\020\uffc9\023\uffc9\024\uffc9\027\uffc9\032\uffc9\033" +
    "\uffc9\035\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\047\uffc9\001\002\000\032\007" +
    "\uffd9\010\uffd9\015\uffd9\020\uffd9\023\uffd9\024\uffd9\032\uffd9" +
    "\040\uffd9\042\uffd9\044\uffd9\045\uffd9\047\uffd9\001\002\000" +
    "\032\007\uffda\010\uffda\015\uffda\020\uffda\023\uffda\024\uffda" +
    "\032\uffda\040\uffda\042\uffda\044\uffda\045\uffda\047\uffda\001" +
    "\002\000\032\007\uffd3\010\uffd3\015\uffd3\020\uffd3\023\uffd3" +
    "\024\uffd3\032\uffd3\040\uffd3\042\uffd3\044\uffd3\045\uffd3\047" +
    "\uffd3\001\002\000\032\007\uffd4\010\uffd4\015\uffd4\020\uffd4" +
    "\023\uffd4\024\uffd4\032\uffd4\040\uffd4\042\uffd4\044\uffd4\045" +
    "\uffd4\047\uffd4\001\002\000\032\007\uffd5\010\uffd5\015\uffd5" +
    "\020\uffd5\023\uffd5\024\uffd5\032\uffd5\040\uffd5\042\uffd5\044" +
    "\uffd5\045\uffd5\047\uffd5\001\002\000\020\027\ufff8\033\ufff8" +
    "\035\ufff8\037\ufff8\041\ufff8\043\ufff8\046\ufff8\001\002\000" +
    "\024\015\031\023\041\024\034\032\042\040\035\042\045" +
    "\044\024\045\047\047\040\001\002\000\004\033\114\001" +
    "\002\000\026\027\ufff0\032\ufff0\033\ufff0\034\116\035\ufff0" +
    "\036\115\037\ufff0\041\ufff0\043\ufff0\046\ufff0\001\002\000" +
    "\024\015\031\023\041\024\034\032\042\040\035\042\045" +
    "\044\024\045\047\047\040\001\002\000\006\010\061\047" +
    "\056\001\002\000\022\027\uffef\032\uffef\033\uffef\035\uffef" +
    "\037\uffef\041\uffef\043\uffef\046\uffef\001\002\000\024\015" +
    "\031\023\041\024\034\032\042\040\035\042\045\044\024" +
    "\045\047\047\040\001\002\000\004\035\122\001\002\000" +
    "\026\027\uffee\032\uffee\033\uffee\034\116\035\uffee\036\115" +
    "\037\uffee\041\uffee\043\uffee\046\uffee\001\002\000\022\027" +
    "\uffed\032\uffed\033\uffed\035\uffed\037\uffed\041\uffed\043\uffed" +
    "\046\uffed\001\002\000\004\037\125\001\002\000\022\027" +
    "\uffec\032\uffec\033\uffec\035\uffec\037\uffec\041\uffec\043\uffec" +
    "\046\uffec\001\002\000\004\023\127\001\002\000\056\005" +
    "\uffbe\007\uffbe\010\uffbe\015\uffbe\016\uffbe\020\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\027\uffbe\032\uffbe\033\uffbe\035\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\001\002\000\020\014\135\016\015\023" +
    "\041\024\034\047\013\050\133\051\140\001\002\000\004" +
    "\016\156\001\002\000\004\016\155\001\002\000\006\016" +
    "\uffc9\022\152\001\002\000\004\016\uffc5\001\002\000\004" +
    "\016\151\001\002\000\006\016\145\022\146\001\002\000" +
    "\004\016\uffc7\001\002\000\006\016\uffc8\022\142\001\002" +
    "\000\004\016\uffc6\001\002\000\004\051\143\001\002\000" +
    "\006\016\uffc2\022\142\001\002\000\004\016\uffc1\001\002" +
    "\000\070\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\015\uffdf\020\uffdf\021\uffdf\023\uffdf" +
    "\024\uffdf\027\uffdf\031\uffdf\032\uffdf\033\uffdf\035\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\001\002\000\006\023\041\024\034\001" +
    "\002\000\004\016\uffbf\001\002\000\006\016\uffc0\022\146" +
    "\001\002\000\070\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\015\uffe0\020\uffe0\021\uffe0" +
    "\023\uffe0\024\uffe0\027\uffe0\031\uffe0\032\uffe0\033\uffe0\035" +
    "\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0" +
    "\045\uffe0\046\uffe0\047\uffe0\001\002\000\004\050\154\001" +
    "\002\000\004\016\uffc3\001\002\000\006\016\uffc4\022\152" +
    "\001\002\000\070\004\uffde\005\uffde\006\uffde\007\uffde\010" +
    "\uffde\011\uffde\012\uffde\013\uffde\015\uffde\020\uffde\021\uffde" +
    "\023\uffde\024\uffde\027\uffde\031\uffde\032\uffde\033\uffde\035" +
    "\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde" +
    "\045\uffde\046\uffde\047\uffde\001\002\000\070\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\015\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1\027\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\035\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\001" +
    "\002\000\004\047\056\001\002\000\004\031\161\001\002" +
    "\000\006\026\ufffd\030\007\001\002\000\004\026\ufffe\001" +
    "\002\000\004\047\056\001\002\000\004\015\173\001\002" +
    "\000\004\020\170\001\002\000\004\020\uffb5\001\002\000" +
    "\004\020\uffb4\001\002\000\024\015\031\023\041\024\034" +
    "\032\042\040\035\042\045\044\024\045\047\047\040\001" +
    "\002\000\004\041\172\001\002\000\042\015\uffb7\023\uffb7" +
    "\024\uffb7\027\uffb7\032\uffb7\033\uffb7\035\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\001\002\000\004\050\174\001\002\000\004\016" +
    "\175\001\002\000\004\021\176\001\002\000\004\047\056" +
    "\001\002\000\004\011\200\001\002\000\006\047\056\050" +
    "\202\001\002\000\004\021\211\001\002\000\004\021\203" +
    "\001\002\000\004\047\056\001\002\000\006\005\206\006" +
    "\205\001\002\000\004\006\210\001\002\000\004\005\207" +
    "\001\002\000\004\020\uffb3\001\002\000\004\020\uffb2\001" +
    "\002\000\004\047\056\001\002\000\006\005\214\006\213" +
    "\001\002\000\004\006\216\001\002\000\004\005\215\001" +
    "\002\000\004\020\uffb1\001\002\000\004\020\uffb0\001\002" +
    "\000\004\024\220\001\002\000\056\005\uffbd\007\uffbd\010" +
    "\uffbd\015\uffbd\016\uffbd\020\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\027\uffbd\032\uffbd\033\uffbd\035\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\001\002\000\010\047\056\050\103\051\101\001\002\000" +
    "\010\047\056\050\103\051\101\001\002\000\014\023\041" +
    "\024\034\047\056\050\103\051\101\001\002\000\042\015" +
    "\uffcf\023\uffcf\024\uffcf\027\uffcf\032\uffcf\033\uffcf\035\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\001\002\000\042\015\uffd0\023\uffd0" +
    "\024\uffd0\027\uffd0\032\uffd0\033\uffd0\035\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\001\002\000\042\015\uffca\023\uffca\024\uffca\027" +
    "\uffca\032\uffca\033\uffca\035\uffca\037\uffca\040\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\001" +
    "\002\000\042\015\uffcd\023\uffcd\024\uffcd\027\uffcd\032\uffcd" +
    "\033\uffcd\035\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\001\002\000\042" +
    "\015\uffce\023\uffce\024\uffce\027\uffce\032\uffce\033\uffce\035" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\046\uffce\047\uffce\001\002\000\042\015\uffd1\023" +
    "\uffd1\024\uffd1\027\uffd1\032\uffd1\033\uffd1\035\uffd1\037\uffd1" +
    "\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046" +
    "\uffd1\047\uffd1\001\002\000\042\015\uffd2\023\uffd2\024\uffd2" +
    "\027\uffd2\032\uffd2\033\uffd2\035\uffd2\037\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2" +
    "\001\002\000\042\015\uffe7\023\uffe7\024\uffe7\027\uffe7\032" +
    "\uffe7\033\uffe7\035\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\001\002\000" +
    "\042\015\uffe9\023\uffe9\024\uffe9\027\uffe9\032\uffe9\033\uffe9" +
    "\035\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044" +
    "\uffe9\045\uffe9\046\uffe9\047\uffe9\001\002\000\042\015\uffe8" +
    "\023\uffe8\024\uffe8\027\uffe8\032\uffe8\033\uffe8\035\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8" +
    "\046\uffe8\047\uffe8\001\002\000\020\027\ufffb\033\ufffb\035" +
    "\ufffb\037\ufffb\041\ufffb\043\ufffb\046\ufffb\001\002\000\020" +
    "\027\ufff1\033\ufff1\035\ufff1\037\ufff1\041\ufff1\043\ufff1\046" +
    "\ufff1\001\002\000\010\023\041\024\034\047\056\001\002" +
    "\000\042\015\uffcb\023\uffcb\024\uffcb\027\uffcb\032\uffcb\033" +
    "\uffcb\035\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\047\uffcb\001\002\000\042\015" +
    "\uffcc\023\uffcc\024\uffcc\027\uffcc\032\uffcc\033\uffcc\035\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\001\002\000\004\027\244\001\002" +
    "\000\004\002\000\001\002\000\004\002\001\001\002\000" +
    "\024\015\031\023\041\024\034\032\042\040\035\042\045" +
    "\044\024\045\047\047\040\001\002\000\004\027\250\001" +
    "\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\242\005\022\006\032" +
    "\007\021\012\024\013\045\014\031\015\027\020\035\026" +
    "\020\027\025\031\043\032\026\033\042\001\001\000\004" +
    "\014\007\001\001\000\036\004\036\005\022\006\032\007" +
    "\021\012\024\013\045\014\031\015\027\020\035\026\020" +
    "\027\025\031\043\032\026\033\042\001\001\000\002\001" +
    "\001\000\004\030\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\236\007\021\001\001\000\036\004\235\005\022\006" +
    "\032\007\021\012\024\013\045\014\031\015\027\020\035" +
    "\026\020\027\025\031\043\032\026\033\042\001\001\000" +
    "\010\021\232\026\234\027\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\021\130\022\131\023\136\024\140\025\133\026\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\072\001\001\000\002\001\001\000\012\011" +
    "\111\016\054\017\056\027\053\001\001\000\002\001\001" +
    "\000\036\004\110\005\022\006\032\007\021\012\024\013" +
    "\045\014\031\015\027\020\035\026\020\027\025\031\043" +
    "\032\026\033\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\057\016\054\017" +
    "\056\027\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\061\027\053\001\001\000\002\001\001" +
    "\000\036\004\063\005\022\006\032\007\021\012\024\013" +
    "\045\014\031\015\027\020\035\026\020\027\025\031\043" +
    "\032\026\033\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\071\027\053\001\001\000\002\001\001" +
    "\000\006\017\070\027\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\106\027\107" +
    "\001\001\000\010\021\103\026\105\027\104\001\001\000" +
    "\006\021\076\027\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\112\005\022\006\032\007\021\012\024\013\045" +
    "\014\031\015\027\020\035\026\020\027\025\031\043\032" +
    "\026\033\042\001\001\000\002\001\001\000\004\010\116" +
    "\001\001\000\036\004\123\005\022\006\032\007\021\012" +
    "\024\013\045\014\031\015\027\020\035\026\020\027\025" +
    "\031\043\032\026\033\042\001\001\000\012\011\117\016" +
    "\054\017\056\027\053\001\001\000\002\001\001\000\036" +
    "\004\120\005\022\006\032\007\021\012\024\013\045\014" +
    "\031\015\027\020\035\026\020\027\025\031\043\032\026" +
    "\033\042\001\001\000\002\001\001\000\004\010\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\021\130\022" +
    "\131\023\136\024\140\025\133\026\135\030\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\025\146\026\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\157\001\001\000\002" +
    "\001\001\000\004\003\161\001\001\000\002\001\001\000" +
    "\012\027\163\034\164\035\165\036\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\170\005\022\006\032\007\021\012\024" +
    "\013\045\014\031\015\027\020\035\026\020\027\025\031" +
    "\043\032\026\033\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\176\001\001\000\002\001\001\000\004" +
    "\027\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\230\027\231" +
    "\001\001\000\006\021\226\027\227\001\001\000\010\021" +
    "\223\026\225\027\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\241\027\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\246\005\022\006\032" +
    "\007\021\012\024\013\045\014\031\015\027\020\035\026" +
    "\020\027\025\031\043\032\026\033\042\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;  //s recebe o Symbol da classe Symbol
    
    public static void main(String args[]) throws Exception{
    //    new Parser (new Yylex(System.in)).parse();
    }
    
    public void syntax_error(Symbol s){
        this.s = s; //recebe simbolo que deu erro        
    }

    //metodo para pegar o "s"
    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // iterador_variavel ::= variavel ABRE_PARENTESES INTEIRO FECHA_PARENTESES PONTO_VIRGULA variavel OP_RELACIONAL variavel PONTO_VIRGULA variavel OP_SUBTRACAO OP_SUBTRACAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador_variavel",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // iterador_variavel ::= variavel ABRE_PARENTESES INTEIRO FECHA_PARENTESES PONTO_VIRGULA variavel OP_RELACIONAL variavel PONTO_VIRGULA variavel OP_SOMA OP_SOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador_variavel",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // iterador_digito ::= variavel ABRE_PARENTESES INTEIRO FECHA_PARENTESES PONTO_VIRGULA variavel OP_RELACIONAL INTEIRO PONTO_VIRGULA variavel OP_SUBTRACAO OP_SUBTRACAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador_digito",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // iterador_digito ::= variavel ABRE_PARENTESES INTEIRO FECHA_PARENTESES PONTO_VIRGULA variavel OP_RELACIONAL INTEIRO PONTO_VIRGULA variavel OP_SOMA OP_SOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador_digito",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // iterador ::= iterador_variavel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // iterador ::= iterador_digito 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // loop_enquanto ::= ENQUANTO ABRE_COLCHETES condicao FECHA_COLCHETES operacoes ENQUANTO_FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_enquanto",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // loop_repeticao ::= REPETICAO ABRE_COLCHETES iterador FECHA_COLCHETES operacoes REPETICAO_FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_repeticao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // loop ::= loop_enquanto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // loop ::= loop_repeticao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametro ::= IDENTIFICADOR VIRGULA parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametro ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // variavel ::= IDENTIFICADOR atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // string ::= ASPAS_SIMPLES IDENTIFICADOR ASPAS_SIMPLES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // string ::= ASPAS_DUPLAS IDENTIFICADOR ASPAS_DUPLAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // vetor_string ::= string VIRGULA vetor_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor_string",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // vetor_string ::= string VIRGULA string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor_string",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // vetor_real ::= REAL VIRGULA vetor_real 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor_real",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // vetor_real ::= REAL VIRGULA REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor_real",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // vetor_inteiro ::= INTEIRO VIRGULA vetor_inteiro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor_inteiro",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // vetor_inteiro ::= INTEIRO VIRGULA INTEIRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor_inteiro",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // vetor ::= vetor_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // vetor ::= vetor_real 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // vetor ::= vetor_inteiro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // numeros ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeros",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // numeros ::= INTEIRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeros",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comandos_aritmeticos ::= variavel OP_SOMA string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_aritmeticos",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comandos_aritmeticos ::= string OP_SOMA variavel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_aritmeticos",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // comandos_aritmeticos ::= string OP_SOMA string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_aritmeticos",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // comandos_aritmeticos ::= variavel OP_SUBTRACAO numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_aritmeticos",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comandos_aritmeticos ::= variavel OP_SUBTRACAO variavel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_aritmeticos",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comandos_aritmeticos ::= variavel OP_SOMA numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_aritmeticos",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comandos_aritmeticos ::= variavel OP_SOMA variavel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_aritmeticos",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comandos_aritmeticos ::= variavel OP_ARITMETICO numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_aritmeticos",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comandos_aritmeticos ::= variavel OP_ARITMETICO variavel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_aritmeticos",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comandos_relacionais ::= variavel OP_RELACIONAL string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_relacionais",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comandos_relacionais ::= variavel OP_DIFERENTE numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_relacionais",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comandos_relacionais ::= variavel OP_DIFERENTE variavel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_relacionais",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comandos_relacionais ::= variavel OP_IGUAL OP_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_relacionais",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comandos_relacionais ::= variavel OP_IGUAL numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_relacionais",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comandos_relacionais ::= variavel OP_IGUAL variavel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_relacionais",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comandos_relacionais ::= variavel OP_RELACIONAL numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_relacionais",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comandos_relacionais ::= variavel OP_RELACIONAL variavel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_relacionais",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comandos_logicos ::= OP_NEGACAO comandos_relacionais 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_logicos",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comandos_logicos ::= comandos_relacionais OP_NEGACAO OP_LOGICO comandos_relacionais 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_logicos",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comandos_logicos ::= comandos_relacionais OP_LOGICO comandos_relacionais 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_logicos",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // atribuicao ::= ABRE_PARENTESES vetor FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // atribuicao ::= ABRE_PARENTESES string FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // atribuicao ::= ABRE_PARENTESES OP_BOOLEANO FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // atribuicao ::= ABRE_PARENTESES numeros FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // chamada ::= IDENTIFICADOR ABRE_PARENTESES FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // chamada ::= IDENTIFICADOR ABRE_PARENTESES parametro FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // escaneia ::= LEIA REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escaneia",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // escaneia ::= LEIA string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escaneia",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // escaneia ::= LEIA INTEIRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escaneia",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // imprime ::= ESCREVA numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprime",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // imprime ::= ESCREVA string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprime",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // imprime ::= ESCREVA variavel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprime",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // condicao ::= comandos_logicos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicao",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // condicao ::= comandos_relacionais 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicao",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // condicional_composta ::= SENAO operacoes SENAO_FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional_composta",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // condicional_composta ::= ESE condicao operacoes ESE_FIM condicional_composta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional_composta",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // condicional_composta ::= ESE condicao operacoes ESE_FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional_composta",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // condicional_simples ::= SE condicao operacoes SE_FIM condicional_composta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional_simples",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // condicional_simples ::= SE condicao operacoes SE_FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional_simples",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // condicional ::= condicional_simples condicional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // condicional ::= condicional_simples 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // comandos ::= chamada 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // comandos ::= atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // comandos ::= escaneia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // comandos ::= imprime 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // comandos ::= comandos_aritmeticos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // operacoes ::= loop operacoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacoes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // operacoes ::= loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacoes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // operacoes ::= condicional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacoes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // operacoes ::= comandos operacoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacoes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // operacoes ::= comandos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacoes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcoes ::= FUNCAO chamada operacoes RETORNA variavel FUNCAO_FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcoes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funcoes ::= FUNCAO chamada operacoes RETORNA variavel FUNCAO_FIM funcoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcoes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= funcoes PRINCIPAL operacoes FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= PRINCIPAL operacoes FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

