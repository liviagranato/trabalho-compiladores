
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 12 02:12:26 BRST 2019
//----------------------------------------------------

package analisador;

import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import analisador.Yylex;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 12 02:12:26 BRST 2019
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\005\000\002\002" +
    "\006\000\002\003\006\000\002\003\005\000\002\004\003" +
    "\000\002\004\004\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\006\010\000\002\006\011" +
    "\000\002\007\010\000\002\007\011\000\002\007\005\000" +
    "\002\010\003\000\002\010\003\000\002\011\004\000\002" +
    "\012\007\000\002\013\006\000\002\013\005\000\002\014" +
    "\005\000\002\014\007\000\002\014\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\015\005\000\002\015\006\000\002\015\004\000\002\015" +
    "\007\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\020\005\000\002\021" +
    "\005\000\002\022\004\000\002\022\004\000\002\022\004" +
    "\000\002\022\004\000\002\023\003\000\002\023\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\025\005\000\002\025\005\000\002\026\005\000\002\026" +
    "\005\000\002\027\005\000\002\027\005\000\002\030\006" +
    "\000\002\030\006\000\002\031\003\000\002\031\005\000" +
    "\002\032\003\000\002\032\003\000\002\033\010\000\002" +
    "\034\010\000\002\035\003\000\002\035\003\000\002\036" +
    "\014\000\002\036\014\000\002\037\014\000\002\037\014" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\006\027\006\031\007\001\002\000\004\027" +
    "\241\001\002\000\004\002\240\001\002\000\032\020\020" +
    "\026\033\033\031\041\025\043\037\045\013\046\041\047" +
    "\023\050\030\051\017\052\016\053\034\001\002\000\032" +
    "\020\020\026\033\033\031\041\025\043\037\045\013\046" +
    "\041\047\023\050\030\051\017\052\016\053\034\001\002" +
    "\000\050\020\ufffc\026\ufffc\030\ufffc\032\ufffc\033\ufffc\034" +
    "\ufffc\036\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc" +
    "\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053" +
    "\ufffc\001\002\000\102\004\uffcd\005\uffcd\006\uffcd\007\uffcd" +
    "\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016" +
    "\uffcd\020\uffcd\021\uffcd\023\uffcd\026\uffcd\030\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\036\uffcd\040\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd" +
    "\052\uffcd\053\uffcd\001\002\000\050\020\ufffa\026\ufffa\030" +
    "\ufffa\032\ufffa\033\ufffa\034\ufffa\036\ufffa\040\ufffa\041\ufffa" +
    "\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\053\ufffa\001\002\000\014\020\020" +
    "\050\051\051\017\052\016\053\034\001\002\000\050\020" +
    "\uffb7\026\uffb7\030\uffb7\032\uffb7\033\uffb7\034\uffb7\036\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046" +
    "\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\001\002" +
    "\000\050\020\ufff8\026\ufff8\030\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\036\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8" +
    "\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053" +
    "\ufff8\001\002\000\102\004\uffc6\005\uffc6\006\uffc6\007\uffc6" +
    "\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016" +
    "\uffc6\020\uffc6\021\uffc6\023\uffc6\026\uffc6\030\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\036\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\001\002\000\102\004\uffce\005\uffce\006" +
    "\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce" +
    "\015\uffce\016\uffce\020\uffce\021\uffce\023\uffce\026\uffce\030" +
    "\uffce\032\uffce\033\uffce\034\uffce\036\uffce\040\uffce\041\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\051\uffce\052\uffce\053\uffce\001\002\000\014\020\020" +
    "\050\051\051\017\052\016\053\034\001\002\000\050\020" +
    "\ufff3\026\ufff3\030\ufff3\032\ufff3\033\ufff3\034\ufff3\036\ufff3" +
    "\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046" +
    "\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\001\002" +
    "\000\050\020\ufff5\026\ufff5\030\ufff5\032\ufff5\033\ufff5\034" +
    "\ufff5\036\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5" +
    "\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053" +
    "\ufff5\001\002\000\014\017\232\050\231\051\230\052\016" +
    "\053\034\001\002\000\050\020\ufff4\026\ufff4\030\ufff4\032" +
    "\ufff4\033\ufff4\034\ufff4\036\ufff4\040\ufff4\041\ufff4\042\ufff4" +
    "\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051" +
    "\ufff4\052\ufff4\053\ufff4\001\002\000\004\022\200\001\002" +
    "\000\050\020\ufff6\026\ufff6\030\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\036\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053" +
    "\ufff6\001\002\000\034\020\020\026\033\032\176\033\031" +
    "\041\025\043\037\045\013\046\041\047\023\050\030\051" +
    "\017\052\016\053\034\001\002\000\070\004\146\005\145" +
    "\006\uffcf\007\uffcf\010\uffcf\011\uffcf\015\147\020\uffcf\022" +
    "\053\026\uffcf\030\uffcf\032\uffcf\033\uffcf\034\uffcf\036\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046" +
    "\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\001\002" +
    "\000\004\022\125\001\002\000\050\020\uffb6\026\uffb6\030" +
    "\uffb6\032\uffb6\033\uffb6\034\uffb6\036\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\052\uffb6\053\uffb6\001\002\000\050\020\ufff1" +
    "\026\ufff1\030\ufff1\032\ufff1\033\ufff1\034\ufff1\036\ufff1\040" +
    "\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1" +
    "\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\001\002\000" +
    "\102\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5\021" +
    "\uffc5\023\uffc5\026\uffc5\030\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\036\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\001\002\000\050\020\ufff2\026\ufff2\030\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\036\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2" +
    "\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052" +
    "\ufff2\053\ufff2\001\002\000\050\020\ufff9\026\ufff9\030\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\036\ufff9\040\ufff9\041\ufff9\042" +
    "\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9" +
    "\051\ufff9\052\ufff9\053\ufff9\001\002\000\004\022\071\001" +
    "\002\000\102\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\020" +
    "\uffd0\021\uffd0\023\uffd0\026\uffd0\030\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\036\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0" +
    "\053\uffd0\001\002\000\004\050\065\001\002\000\064\004" +
    "\045\005\044\006\043\007\050\010\046\011\047\020\ufff7" +
    "\026\ufff7\030\ufff7\032\ufff7\033\ufff7\034\ufff7\036\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7" +
    "\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\001\002\000" +
    "\014\020\020\050\051\051\017\052\016\053\034\001\002" +
    "\000\014\020\020\050\051\051\017\052\016\053\034\001" +
    "\002\000\014\020\020\050\051\051\017\052\016\053\034" +
    "\001\002\000\014\020\020\050\051\051\017\052\016\053" +
    "\034\001\002\000\014\020\020\050\051\051\017\052\016" +
    "\053\034\001\002\000\014\020\020\050\051\051\017\052" +
    "\016\053\034\001\002\000\104\004\uffcf\005\uffcf\006\uffcf" +
    "\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015" +
    "\uffcf\016\uffcf\020\uffcf\021\uffcf\022\053\023\uffcf\026\uffcf" +
    "\030\uffcf\032\uffcf\033\uffcf\034\uffcf\036\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\050\uffcf\051\uffcf\052\uffcf\053\uffcf\001\002\000\102\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\046\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\020\uffd4\021\uffd4\023" +
    "\uffd4\026\uffd4\030\uffd4\032\uffd4\033\uffd4\034\uffd4\036\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046" +
    "\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\001\002" +
    "\000\006\050\054\052\055\001\002\000\004\023\057\001" +
    "\002\000\004\023\056\001\002\000\102\004\uffba\005\uffba" +
    "\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014" +
    "\uffba\015\uffba\016\uffba\020\uffba\021\uffba\023\uffba\026\uffba" +
    "\030\uffba\032\uffba\033\uffba\034\uffba\036\uffba\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba" +
    "\050\uffba\051\uffba\052\uffba\053\uffba\001\002\000\102\004" +
    "\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\014\uffbb\015\uffbb\016\uffbb\020\uffbb\021\uffbb\023" +
    "\uffbb\026\uffbb\030\uffbb\032\uffbb\033\uffbb\034\uffbb\036\uffbb" +
    "\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046" +
    "\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\001\002" +
    "\000\102\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\046\011" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\020\uffd2" +
    "\021\uffd2\023\uffd2\026\uffd2\030\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\036\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\001\002\000\102\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\020\uffd3\021\uffd3\023\uffd3\026\uffd3\030\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\036\uffd3\040\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\001\002\000\102\004\uffd7\005\uffd7\006" +
    "\043\007\050\010\046\011\047\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\020\uffd7\021\uffd7\023\uffd7\026\uffd7\030" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\036\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\052\uffd7\053\uffd7\001\002\000\102\004\uffd6" +
    "\005\uffd6\006\043\007\050\010\046\011\047\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\020\uffd6\021\uffd6\023\uffd6" +
    "\026\uffd6\030\uffd6\032\uffd6\033\uffd6\034\uffd6\036\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6" +
    "\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\001\002\000" +
    "\102\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\046\011\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5\021" +
    "\uffd5\023\uffd5\026\uffd5\030\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\036\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5" +
    "\001\002\000\004\020\066\001\002\000\004\051\067\001" +
    "\002\000\004\021\070\001\002\000\050\020\uffe8\026\uffe8" +
    "\030\uffe8\032\uffe8\033\uffe8\034\uffe8\036\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\053\uffe8\001\002\000\016\013" +
    "\075\020\020\050\051\051\017\052\016\053\034\001\002" +
    "\000\010\012\116\013\117\023\uffeb\001\002\000\024\004" +
    "\045\005\044\006\043\007\050\010\046\011\047\014\106" +
    "\015\104\016\105\001\002\000\004\023\uffea\001\002\000" +
    "\014\020\020\050\051\051\017\052\016\053\034\001\002" +
    "\000\004\023\077\001\002\000\032\020\020\026\033\033" +
    "\031\041\025\043\037\045\013\046\041\047\023\050\030" +
    "\051\017\052\016\053\034\001\002\000\034\020\020\026" +
    "\033\033\031\041\025\043\037\044\102\045\013\046\041" +
    "\047\023\050\030\051\017\052\016\053\034\001\002\000" +
    "\050\020\ufffb\026\ufffb\030\ufffb\032\ufffb\033\ufffb\034\ufffb" +
    "\036\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045" +
    "\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\001\002\000\050\020\uffb4\026\uffb4\030\uffb4\032\uffb4\033" +
    "\uffb4\034\uffb4\036\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\001\002\000\004\023\uffd9\001\002\000\016" +
    "\017\114\020\020\050\051\051\017\052\016\053\034\001" +
    "\002\000\012\050\113\051\112\052\016\053\034\001\002" +
    "\000\010\050\110\052\016\053\034\001\002\000\010\012" +
    "\uffe1\013\uffe1\023\uffe1\001\002\000\010\012\uffe2\013\uffe2" +
    "\023\uffe2\001\002\000\010\012\uffdf\013\uffdf\023\uffdf\001" +
    "\002\000\010\012\uffdd\013\uffdd\023\uffdd\001\002\000\010" +
    "\012\uffe0\013\uffe0\023\uffe0\001\002\000\010\012\uffde\013" +
    "\uffde\023\uffde\001\002\000\024\004\045\005\044\006\043" +
    "\007\050\010\046\011\047\012\uffdc\013\uffdc\023\uffdc\001" +
    "\002\000\014\020\020\050\051\051\017\052\016\053\034" +
    "\001\002\000\004\012\120\001\002\000\014\020\020\050" +
    "\051\051\017\052\016\053\034\001\002\000\004\023\uffda" +
    "\001\002\000\006\012\123\023\uffdb\001\002\000\016\013" +
    "\075\020\020\050\051\051\017\052\016\053\034\001\002" +
    "\000\004\023\uffd8\001\002\000\016\013\075\020\020\050" +
    "\051\051\017\052\016\053\034\001\002\000\004\023\127" +
    "\001\002\000\032\020\020\026\033\033\031\041\025\043" +
    "\037\045\013\046\041\047\023\050\030\051\017\052\016" +
    "\053\034\001\002\000\034\020\020\026\033\033\031\034" +
    "\131\041\025\043\037\045\013\046\041\047\023\050\030" +
    "\051\017\052\016\053\034\001\002\000\054\020\ufff0\026" +
    "\ufff0\030\ufff0\032\ufff0\033\ufff0\034\ufff0\035\133\036\ufff0" +
    "\037\132\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045" +
    "\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0" +
    "\001\002\000\032\020\020\026\033\033\031\041\025\043" +
    "\037\045\013\046\041\047\023\050\030\051\017\052\016" +
    "\053\034\001\002\000\004\022\135\001\002\000\050\020" +
    "\uffef\026\uffef\030\uffef\032\uffef\033\uffef\034\uffef\036\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\001\002" +
    "\000\016\013\075\020\020\050\051\051\017\052\016\053" +
    "\034\001\002\000\004\023\137\001\002\000\032\020\020" +
    "\026\033\033\031\041\025\043\037\045\013\046\041\047" +
    "\023\050\030\051\017\052\016\053\034\001\002\000\034" +
    "\020\020\026\033\033\031\036\141\041\025\043\037\045" +
    "\013\046\041\047\023\050\030\051\017\052\016\053\034" +
    "\001\002\000\054\020\uffee\026\uffee\030\uffee\032\uffee\033" +
    "\uffee\034\uffee\035\133\036\uffee\037\132\040\uffee\041\uffee" +
    "\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050" +
    "\uffee\051\uffee\052\uffee\053\uffee\001\002\000\050\020\uffed" +
    "\026\uffed\030\uffed\032\uffed\033\uffed\034\uffed\036\uffed\040" +
    "\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed" +
    "\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\001\002\000" +
    "\034\020\020\026\033\033\031\040\144\041\025\043\037" +
    "\045\013\046\041\047\023\050\030\051\017\052\016\053" +
    "\034\001\002\000\050\020\uffec\026\uffec\030\uffec\032\uffec" +
    "\033\uffec\034\uffec\036\uffec\040\uffec\041\uffec\042\uffec\043" +
    "\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec" +
    "\052\uffec\053\uffec\001\002\000\004\005\175\001\002\000" +
    "\004\004\174\001\002\000\020\017\150\020\020\022\152" +
    "\050\051\051\017\052\016\053\034\001\002\000\050\020" +
    "\uffe5\026\uffe5\030\uffe5\032\uffe5\033\uffe5\034\uffe5\036\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\001\002" +
    "\000\064\004\045\005\044\006\043\007\050\010\046\011" +
    "\047\020\uffe3\026\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\036\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045" +
    "\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3" +
    "\001\002\000\010\051\154\052\161\053\157\001\002\000" +
    "\004\023\uffc4\001\002\000\004\025\171\001\002\000\004" +
    "\023\uffc2\001\002\000\004\023\170\001\002\000\004\025" +
    "\165\001\002\000\004\023\uffc3\001\002\000\004\025\162" +
    "\001\002\000\004\052\164\001\002\000\004\023\uffc0\001" +
    "\002\000\006\023\uffc1\025\162\001\002\000\004\053\166" +
    "\001\002\000\006\023\uffbf\025\165\001\002\000\004\023" +
    "\uffbe\001\002\000\050\020\uffe4\026\uffe4\030\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\036\uffe4\040\uffe4\041\uffe4\042\uffe4\043" +
    "\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4" +
    "\052\uffe4\053\uffe4\001\002\000\004\051\173\001\002\000" +
    "\004\023\uffbc\001\002\000\006\023\uffbd\025\171\001\002" +
    "\000\052\020\uffcc\023\uffcc\026\uffcc\030\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\036\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\001\002\000\052\020\uffcb\023\uffcb\026\uffcb" +
    "\030\uffcb\032\uffcb\033\uffcb\034\uffcb\036\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\052\uffcb\053\uffcb\001\002\000\006\027" +
    "\ufffd\031\007\001\002\000\004\027\ufffe\001\002\000\004" +
    "\050\202\001\002\000\004\023\224\001\002\000\004\020" +
    "\205\001\002\000\004\023\uffb3\001\002\000\004\023\uffb2" +
    "\001\002\000\004\052\206\001\002\000\004\021\207\001" +
    "\002\000\004\024\210\001\002\000\004\050\211\001\002" +
    "\000\004\014\212\001\002\000\006\050\213\052\214\001" +
    "\002\000\004\024\221\001\002\000\004\024\215\001\002" +
    "\000\004\050\216\001\002\000\006\004\146\005\145\001" +
    "\002\000\004\023\uffb1\001\002\000\004\023\uffb0\001\002" +
    "\000\004\050\216\001\002\000\004\023\uffaf\001\002\000" +
    "\004\023\uffae\001\002\000\032\020\020\026\033\033\031" +
    "\041\025\043\037\045\013\046\041\047\023\050\030\051" +
    "\017\052\016\053\034\001\002\000\034\020\020\026\033" +
    "\033\031\041\025\042\226\043\037\045\013\046\041\047" +
    "\023\050\030\051\017\052\016\053\034\001\002\000\050" +
    "\020\uffb5\026\uffb5\030\uffb5\032\uffb5\033\uffb5\034\uffb5\036" +
    "\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\001" +
    "\002\000\050\020\uffc8\026\uffc8\030\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\036\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\001\002\000\050\020\uffc9\026\uffc9\030\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\036\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\053\uffc9\001\002\000\050\020\uffca\026\uffca" +
    "\030\uffca\032\uffca\033\uffca\034\uffca\036\uffca\040\uffca\041" +
    "\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\052\uffca\053\uffca\001\002\000\050\020" +
    "\uffc7\026\uffc7\030\uffc7\032\uffc7\033\uffc7\034\uffc7\036\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\001\002" +
    "\000\020\004\045\005\044\006\043\007\050\010\046\011" +
    "\047\021\234\001\002\000\102\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\020\uffd1\021\uffd1\023\uffd1\026\uffd1\030\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\036\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\001\002\000\064\004\045\005" +
    "\044\006\043\007\050\010\046\011\047\020\uffe9\026\uffe9" +
    "\030\uffe9\032\uffe9\033\uffe9\034\uffe9\036\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9" +
    "\050\uffe9\051\uffe9\052\uffe9\053\uffe9\001\002\000\034\020" +
    "\020\026\033\030\237\033\031\041\025\043\037\045\013" +
    "\046\041\047\023\050\030\051\017\052\016\053\034\001" +
    "\002\000\004\002\000\001\002\000\004\002\001\001\002" +
    "\000\032\020\020\026\033\033\031\041\025\043\037\045" +
    "\013\046\041\047\023\050\030\051\017\052\016\053\034" +
    "\001\002\000\034\020\020\026\033\030\243\033\031\041" +
    "\025\043\037\045\013\046\041\047\023\050\030\051\017" +
    "\052\016\053\034\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\235\005\007\006\020" +
    "\011\011\012\035\014\014\017\041\020\021\021\023\022" +
    "\025\023\037\030\010\032\034\033\013\034\031\001\001" +
    "\000\040\004\026\005\007\006\020\011\011\012\035\014" +
    "\014\017\041\020\021\021\023\022\025\023\037\030\010" +
    "\032\034\033\013\034\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\234\023\037" +
    "\030\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\232\023\037" +
    "\030\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\005\100\006\020\011\011\012" +
    "\035\014\014\017\041\020\021\021\023\022\025\023\037" +
    "\030\010\032\034\033\013\034\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\063\023\037\030\010\001\001\000" +
    "\010\017\062\023\037\030\010\001\001\000\010\017\061" +
    "\023\037\030\010\001\001\000\010\017\060\023\037\030" +
    "\010\001\001\000\010\017\057\023\037\030\010\001\001" +
    "\000\010\017\051\023\037\030\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\075" +
    "\015\073\016\071\017\072\023\037\030\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\102\017\072\023\037\030\010\001\001\000\002\001" +
    "\001\000\040\004\077\005\007\006\020\011\011\012\035" +
    "\014\014\017\041\020\021\021\023\022\025\023\037\030" +
    "\010\032\034\033\013\034\031\001\001\000\036\005\100" +
    "\006\020\011\011\012\035\014\014\017\041\020\021\021" +
    "\023\022\025\023\037\030\010\032\034\033\013\034\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\114\023\037\030\010\001\001\000\004" +
    "\023\110\001\001\000\004\023\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\121\017\072\023\037\030\010\001\001\000\002" +
    "\001\001\000\012\016\120\017\072\023\037\030\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\123" +
    "\015\073\016\071\017\072\023\037\030\010\001\001\000" +
    "\002\001\001\000\016\010\125\015\073\016\071\017\072" +
    "\023\037\030\010\001\001\000\002\001\001\000\040\004" +
    "\127\005\007\006\020\011\011\012\035\014\014\017\041" +
    "\020\021\021\023\022\025\023\037\030\010\032\034\033" +
    "\013\034\031\001\001\000\036\005\100\006\020\011\011" +
    "\012\035\014\014\017\041\020\021\021\023\022\025\023" +
    "\037\030\010\032\034\033\013\034\031\001\001\000\004" +
    "\007\133\001\001\000\040\004\142\005\007\006\020\011" +
    "\011\012\035\014\014\017\041\020\021\021\023\022\025" +
    "\023\037\030\010\032\034\033\013\034\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\135\015\073" +
    "\016\071\017\072\023\037\030\010\001\001\000\002\001" +
    "\001\000\040\004\137\005\007\006\020\011\011\012\035" +
    "\014\014\017\041\020\021\021\023\022\025\023\037\030" +
    "\010\032\034\033\013\034\031\001\001\000\036\005\100" +
    "\006\020\011\011\012\035\014\014\017\041\020\021\021" +
    "\023\022\025\023\037\030\010\032\034\033\013\034\031" +
    "\001\001\000\004\007\141\001\001\000\002\001\001\000" +
    "\036\005\100\006\020\011\011\012\035\014\014\017\041" +
    "\020\021\021\023\022\025\023\037\030\010\032\034\033" +
    "\013\034\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\150\023\037\030\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\155" +
    "\025\152\026\157\027\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\176\001\001\000\002\001\001\000\010\035\200" +
    "\036\202\037\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\216\021\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\221" +
    "\021\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\224\005\007\006\020\011\011\012\035\014\014" +
    "\017\041\020\021\021\023\022\025\023\037\030\010\032" +
    "\034\033\013\034\031\001\001\000\036\005\100\006\020" +
    "\011\011\012\035\014\014\017\041\020\021\021\023\022" +
    "\025\023\037\030\010\032\034\033\013\034\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\005\100\006\020\011" +
    "\011\012\035\014\014\017\041\020\021\021\023\022\025" +
    "\023\037\030\010\032\034\033\013\034\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\004\241\005\007" +
    "\006\020\011\011\012\035\014\014\017\041\020\021\021" +
    "\023\022\025\023\037\030\010\032\034\033\013\034\031" +
    "\001\001\000\036\005\100\006\020\011\011\012\035\014" +
    "\014\017\041\020\021\021\023\022\025\023\037\030\010" +
    "\032\034\033\013\034\031\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;  //s recebe o Symbol da classe Symbol
    
    public static void main(String args[]) throws Exception{
    //    new Parser (new Yylex(System.in)).parse();
    }
    
    public void syntax_error(Symbol s){
        this.s = s; //recebe simbolo que deu erro        
    }

    //metodo para pegar o "s"
    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // iterador_variavel ::= IDENTIFICADOR ABRE_PARENTESES INTEIRO FECHA_PARENTESES PONTO_VIRGULA IDENTIFICADOR OP_RELACIONAL IDENTIFICADOR PONTO_VIRGULA decremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador_variavel",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // iterador_variavel ::= IDENTIFICADOR ABRE_PARENTESES INTEIRO FECHA_PARENTESES PONTO_VIRGULA IDENTIFICADOR OP_RELACIONAL IDENTIFICADOR PONTO_VIRGULA incremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador_variavel",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // iterador_digito ::= IDENTIFICADOR ABRE_PARENTESES INTEIRO FECHA_PARENTESES PONTO_VIRGULA IDENTIFICADOR OP_RELACIONAL INTEIRO PONTO_VIRGULA decremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador_digito",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // iterador_digito ::= IDENTIFICADOR ABRE_PARENTESES INTEIRO FECHA_PARENTESES PONTO_VIRGULA IDENTIFICADOR OP_RELACIONAL INTEIRO PONTO_VIRGULA incremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador_digito",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // iterador ::= iterador_variavel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // iterador ::= iterador_digito 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterador",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // loop_enquanto ::= ENQUANTO ABRE_COLCHETES condicao FECHA_COLCHETES operacoes ENQUANTO_FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_enquanto",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // loop_repeticao ::= REPETICAO ABRE_COLCHETES iterador FECHA_COLCHETES operacoes REPETICAO_FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_repeticao",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // loop ::= loop_enquanto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // loop ::= loop_repeticao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametro ::= IDENTIFICADOR VIRGULA parametro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametro ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // vetor_pos ::= IDENTIFICADOR ABRE_COLCHETES INTEIRO FECHA_COLCHETES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor_pos",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // vetor_pos ::= IDENTIFICADOR ABRE_COLCHETES IDENTIFICADOR FECHA_COLCHETES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor_pos",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // vetor_string ::= STRING VIRGULA vetor_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor_string",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // vetor_string ::= STRING VIRGULA STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor_string",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // vetor_real ::= REAL VIRGULA vetor_real 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor_real",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // vetor_real ::= REAL VIRGULA REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor_real",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // vetor_inteiro ::= INTEIRO VIRGULA vetor_inteiro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor_inteiro",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // vetor_inteiro ::= INTEIRO VIRGULA INTEIRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor_inteiro",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // vetor ::= vetor_string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // vetor ::= vetor_real 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // vetor ::= vetor_inteiro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vetor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // numeros ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeros",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // numeros ::= INTEIRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeros",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // retorno ::= RETORNA OP_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // retorno ::= RETORNA numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // retorno ::= RETORNA STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // retorno ::= RETORNA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // decremento ::= IDENTIFICADOR OP_SUBTRACAO OP_SUBTRACAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decremento",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // incremento ::= IDENTIFICADOR OP_SOMA OP_SOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expressao ::= vetor_pos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expressao ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expressao ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expressao ::= numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expressao ::= ABRE_PARENTESES expressao FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expressao ::= expressao OP_MOD expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expressao ::= expressao OP_EXPONENCIACAO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expressao ::= expressao OP_DIVISAO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expressao ::= expressao OP_MULTIPLICACAO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expressao ::= expressao OP_SUBTRACAO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expressao ::= expressao OP_SOMA expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comandos_logicos ::= comandos_relacionais OP_LOGICO comandos_relacionais OP_LOGICO condicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_logicos",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comandos_logicos ::= OP_NEGACAO comandos_relacionais 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_logicos",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comandos_logicos ::= comandos_relacionais OP_NEGACAO OP_LOGICO comandos_relacionais 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_logicos",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comandos_logicos ::= comandos_relacionais OP_LOGICO comandos_relacionais 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_logicos",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comandos_relacionais ::= expressao OP_IGUAL expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_relacionais",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comandos_relacionais ::= expressao OP_DIFERENTE STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_relacionais",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comandos_relacionais ::= expressao OP_IGUAL OP_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_relacionais",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comandos_relacionais ::= expressao OP_DIFERENTE numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_relacionais",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comandos_relacionais ::= expressao OP_DIFERENTE IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_relacionais",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comandos_relacionais ::= expressao OP_RELACIONAL numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_relacionais",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comandos_relacionais ::= expressao OP_RELACIONAL IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos_relacionais",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // atribuicao ::= IDENTIFICADOR OP_IGUAL expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // atribuicao ::= IDENTIFICADOR OP_IGUAL ABRE_COLCHETES vetor FECHA_COLCHETES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // atribuicao ::= IDENTIFICADOR OP_IGUAL OP_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // chamada ::= IDENTIFICADOR ABRE_PARENTESES FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // chamada ::= IDENTIFICADOR ABRE_PARENTESES parametro FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // escaneia ::= LEIA IDENTIFICADOR ABRE_PARENTESES STRING FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escaneia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // imprime ::= ESCREVA expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprime",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // condicao ::= comandos_logicos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicao",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // condicao ::= comandos_relacionais 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicao",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // condicional_composta ::= SENAO operacoes SENAO_FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional_composta",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // condicional_composta ::= ESE ABRE_COLCHETES condicao FECHA_COLCHETES operacoes ESE_FIM condicional_composta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional_composta",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // condicional_composta ::= ESE ABRE_COLCHETES condicao FECHA_COLCHETES operacoes ESE_FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional_composta",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // condicional ::= SE ABRE_COLCHETES condicao FECHA_COLCHETES operacoes SE_FIM condicional_composta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // condicional ::= SE ABRE_COLCHETES condicao FECHA_COLCHETES operacoes SE_FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comandos ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comandos ::= loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // comandos ::= condicional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // comandos ::= decremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // comandos ::= incremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // comandos ::= retorno 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // comandos ::= expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // comandos ::= atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // comandos ::= escaneia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // comandos ::= imprime 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // operacoes ::= operacoes comandos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacoes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // operacoes ::= comandos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacoes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcoes ::= FUNCAO operacoes FUNCAO_FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcoes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funcoes ::= FUNCAO operacoes FUNCAO_FIM funcoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcoes",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= funcoes PRINCIPAL operacoes FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= PRINCIPAL operacoes FIM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

